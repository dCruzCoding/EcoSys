""" üëã ¬°Hola! Bienvenido a mi peque√±o Ecosistema virtual üåçüåê

Soy Daniel Cruz (dCruzCoding) y desarrollado un simulador de 'vida artificial', en un entorno f√≠sico limitado. 

A continuaci√≥n te explico c√≥mo funciona el programa:
    ‚ñ∂Ô∏è Inicializaci√≥n:
        Se le pide al usuario el n√∫mero de individuos iniciales y el n√∫mero de iteraciones.
        Se generan los individuos en posiciones aleatorias dentro de una cuadr√≠cula fija.

    üîÑ Bucle de simulaci√≥n (iteraciones):
        üö∂‚Äç‚ôÄÔ∏è Movimiento: Cada individuo se mueve aleatoriamente en una de las 8 direcciones. Si se sale de la cuadr√≠cula, 
        se utiliza el m√≥dulo para ‚Äúenvolver‚Äù la posici√≥n.

        Interacci√≥n:
            Se agrupan los individuos por posici√≥n.
            En las celdas donde hay m√°s de un individuo, se utiliza un m√≥dulo random para generar un valor aleatorio
            de 0 a 1 que utilizaremos para comprobar qu√© acci√≥n se realizar√°; reproducci√≥n, conflicto, o nada.
            o	üë∂ Reproducci√≥n (probabilidad de 0.4): se genera un nuevo individuo (hijo) en esa celda.
                ¬°OJO! Cada individuo hijo (representado de color rosa) tardar√° un total de 5 turnos (iteraciones) en
                crecer y convertirse en adulto. Hasta entonces NO podr√° tener encuentros con otros individuos.
            o	‚öîÔ∏è Conflicto (probabilidad de 0.5): uno de los individuos encontrados en la celda, muere y otro ‚Äúsobrevive‚Äù.
            o	No es muy probable, pero tambi√©n puede que no ocurra y ambos sigan tranquilos con su transcurso.
             
        Envejecimiento y muerte: Cada individuo incrementa su edad en cada iteraci√≥n. Si la edad es 65 o mayor, el individuo 
        muere y se elimina.

        üëÅÔ∏è ¬°OJO! Cada vez que haya un evento (reproducci√≥n, conflicto, crecimiento de hijo a adulto, o muerte por envejecimiento)
        se pausar√° el flujo del programa y el usuario deber√° darle a cualquier tecla para continuar. Adem√°s, tambi√©n se mostrar√°
        un mensaje (si no en el runtime del programa) con los individuos vivos y qu√© evento a ocurrido.
        
    Continuamente se mostrar√° en pantalla un contador con los individuos vivos y con las veces que se ha dado uno
    de los eventos anteriormente mencionados.

    üèÅ La simulaci√≥n finaliza cuando se han completado todas las iteraciones o cuando no quedan individuos vivos. El usuario
    tambi√©n puede decidir finalizar el programa cerrando la ventana al bot√≥n de exit ('x').

    

üÜïüåü ¬øQu√© he a√±adido respecto al c√≥digo base (version 1.0)? üÜïüåü

- Clase Estadistica para mejorar la organizaci√≥n de contadores totales. A√±adidos contadores de eventos e individuos vivos.

- Imprimir unicamente cuando haya evento, mostrando informaci√≥n de qu√© iteraci√≥n es y cu√°ntos quedan vivos,
  y qu√© evento ocurri√≥ y sus consecuencias.

- A√±adir pantalla de visualizacion con pygame: tanto para pedir el input, como para mostrar la cuadrilla con 
la simulaci√≥n del 'biosistema virtual'. Adem√°s, se marca cada evento con un color, se a√±ade pausa tras evento  (para continuar,
cualquier interacci√≥n del usuario con el teclado vale), y boton para finalizar la ejecuci√≥n en cualquier momento.

- A√±adido 5 turnos para pasar de hijo a individuo adulto (hijo: representado como rosa en pantalla e invulnerable a encuentros)

- Eventos conflicto y reproducci√≥n excluyentes entre si: si ocurre uno no ocurre el otro.

- A√±adida peque√±a probabilidad de que no ocurra nada al tener un encuentro.

- Comentarios explicativos en el c√≥digo.


üîù POSIBLES MEJORAS: A√±adir trazabilidad al runtime de la ejecuci√≥n. A√±adir try/except para controlar excepciones. 
A√±adir validaciones para controlar errores (p.ej, en input). 
"""


#   .___  ___. ____    ____      ______   ____    __    ____ .__   __.    .______    __    ______        _______.____    ____  _______.___________. _______ .___  ___. 
#   |   \/   | \   \  /   /     /  __  \  \   \  /  \  /   / |  \ |  |    |   _  \  |  |  /  __  \      /       |\   \  /   / /       |           ||   ____||   \/   | 
#   |  \  /  |  \   \/   /     |  |  |  |  \   \/    \/   /  |   \|  |    |  |_)  | |  | |  |  |  |    |   (----` \   \/   / |   (----`---|  |----`|  |__   |  \  /  | 
#   |  |\/|  |   \_    _/      |  |  |  |   \            /   |  . `  |    |   _  <  |  | |  |  |  |     \   \      \_    _/   \   \       |  |     |   __|  |  |\/|  | 
#   |  |  |  |     |  |        |  `--'  |    \    /\    /    |  |\   |    |  |_)  | |  | |  `--'  | .----)   |       |  | .----)   |      |  |     |  |____ |  |  |  | 
#   |__|  |__|     |__|         \______/      \__/  \__/     |__| \__|    |______/  |__|  \______/  |_______/        |__| |_______/       |__|     |_______||__|  |__| 
                                                                                                                                                                   
# Versi√≥n 1.2 


import pygame
import random


# ---------------------- Par√°metros globales ----------------------

# Definir el tama√±o de la cuadr√≠cula
grid_width = 20    # ancho de cuadr√≠cula
grid_height = 20   # alto de cuadr√≠cula
cell_size = 30     # tama√±o de cada celda en p√≠xeles

# Definir el tama√±o de la pantalla de simulaci√≥n en 'pygame'
screen_width = grid_width * cell_size  # ancho
screen_height = grid_height * cell_size  # alto

# Definir diccionario con los colores que vamos a utilizar
COLORS = {
    'WHITE': (255, 255, 255),
    'BLACK': (0, 0, 0),
    'BLUE': (0, 0, 255),
    'PINK': (255, 0, 255),
    'DARK_RED': (178, 34, 34),
    'RED': (255, 0, 0),  
    'GREEN': (0, 255, 0),  
    'GRAY': (200, 200, 200)
}


# ---------------------- Configuraci√≥n del bot√≥n de salida ----------------------

button_color = COLORS['DARK_RED']
button_radius = 12 # Tama√±o (Radio del bot√≥n circular)
button_center = (screen_width - 25, screen_height - 25)  # Posici√≥n (esquina inferior derecha)


# ---------------------- Clase Estadistica ----------------------
# Se encarga de llevar un conteo TOTAL de eventos clave en la simulaci√≥n

class Estadistica:
    def __init__(self):
        self.reproducciones = 0
        self.conflictos = 0
        self.muertes = 0

    def sumar_reproduccion(self):
        self.reproducciones += 1

    def sumar_conflicto(self, cantidad):
        self.conflictos += cantidad

    def sumar_muerte(self, cantidad):
        self.muertes += cantidad

    def obtener_totales(self):
        return self.reproducciones, self.conflictos, self.muertes



# ---------------------- Clase Individuo ----------------------
# Representa un 'ser' dentro de la simulaci√≥n

class Individuo:
    def __init__(self, x, y, age=0, is_child=False, turnos_hijo=0):
        self.x = x  # Posicion X
        self.y = y  # Posiciion Y
        self.age = age  # Edad del individuo
        self.is_child = is_child  # Para distinguir si es un individuo hijo
        self.turnos_hijo = turnos_hijo  # Cu√°ntos turnos lleva como hijo

    def move(self):
        """ Mueve al individuo en una direcci√≥n aleatoria dentro de la cuadr√≠cula """
        movimientos = [(-1, -1), (-1, 0), (-1, 1), (0, -1),
                       (0, 1), (1, -1), (1, 0), (1, 1)]
        dx, dy = random.choice(movimientos)
        self.x = (self.x + dx) % grid_width
        self.y = (self.y + dy) % grid_height

    def es_rosa(self):
        """ Devuelve True si el individuo sigue en estado de ni√±o (rosa) """
        return self.turnos_hijo > 0

    def crecer(self):
        """ Revisa el estado de ni√±o hasta para convertirlo en adulto cuando pasen los turnos necesarios """
        if self.es_rosa():
            self.turnos_hijo -= 1
        elif self.turnos_hijo == 0 and self.is_child:
            self.is_child = False   # Se convierte en adulto si pas√≥ el tiempo de hijo


# ---------------------- Funciones de dibujo ----------------------

def draw_grid(screen):
    """ Dibuja la cuadr√≠cula de la simulaci√≥n """
    for x in range(0, screen_width, cell_size):
        pygame.draw.line(screen, COLORS['GRAY'], (x, 0), (x, screen_height))
    for y in range(0, screen_height, cell_size):
        pygame.draw.line(screen, COLORS['GRAY'], (0, y), (screen_width, y))

def draw_individuos(screen, individuos):
    """ Dibuja los individuos en la cuadr√≠cula """
    for ind in individuos:
        color = COLORS['PINK'] if ind.es_rosa() else COLORS['BLUE']  # Rosa para ni√±os, azul para adultos
        pygame.draw.circle(screen, color,
                           (ind.x * cell_size + cell_size // 2, ind.y * cell_size + cell_size // 2),
                           cell_size // 3)

def draw_stats(screen, iteracion, vivos, estadistica):
    """ Dibuja las estad√≠sticas en pantalla """
    font = pygame.font.SysFont(None, 30)
    reproducciones, conflictos, muertes = estadistica.obtener_totales()
    text = f"Iteraci√≥n: {iteracion} | Vivos: {vivos} | Rep: {reproducciones} | Conf: {conflictos} | Muerte: {muertes}"
    text_surface = font.render(text, True, COLORS['BLACK'])
    screen.blit(text_surface, (10, 10))

def draw_exit_button(screen):
    """ Dibuja el bot√≥n de salida """
    pygame.draw.circle(screen, button_color, button_center, button_radius)
    font = pygame.font.SysFont(None, 15)
    text_surface = font.render("x", True, COLORS['WHITE'])
    text_rect = text_surface.get_rect(center=button_center)
    screen.blit(text_surface, text_rect)

def pause_for_event():
    """ A√±ade una pausa en la simulaci√≥n tras cada evento """
    paused = True
    while paused:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:  # Detectar clic del rat√≥n
                if check_button_click(event.pos):  # Revisar si el clic fue sobre el bot√≥n
                    pygame.quit()
                    exit()
            elif event.type == pygame.KEYDOWN:
                paused = False  # Salir de la pausa si se presiona una tecla

def check_button_click(pos):
    """ Verifica si se hizo clic en el bot√≥n de salida """
    distance = ((pos[0] - button_center[0]) ** 2 + (pos[1] - button_center[1]) ** 2) ** 0.5
    return distance <= button_radius

def input_screen():
    """ A√±ade una pantalla para pedir al usuario los inputs que se requieren """
    pygame.init()
    screen_inp = pygame.display.set_mode((300,200))
    pygame.display.set_caption("Configuraci√≥n de la Simulaci√≥n")
    font_inp = pygame.font.Font(None, 20)
    
    # Inicializamos las cajas de entrada (dos: "Individuos" e "Iteraciones")
    input_boxes = ["", ""]  # [Individuos, Iteraciones]
    selected_box = 0  # Establecemos que la caja seleccionada inicialmente sea la primera (√≠ndice 0)

    # A√±adimos variables para controlar la visibilidad del cursor de texto ('|')
    cursor_visible = True
    cursor_timer = pygame.time.get_ticks()  

    # Bucle principal de la pantalla de entrada, se ejecuta hasta que el usuario decida salir o de los datos
    running = True
    while running:

        # Definimos par√°metros del formato de la pantalla
        screen_inp.fill(COLORS['WHITE'])
        title = font_inp.render("Ingrese valores y presione Enter", True, COLORS['BLACK'])
        screen_inp.blit(title, (50, 50))
        
        labels = ["Individuos: ", "Iteraciones: "]

        # Dibujamos las etiquetas y el texto ingresado (y el cursor si est√° activo)
        for i, label in enumerate(labels):
            text = input_boxes[i] + ("|" if cursor_visible and i == selected_box else "")
            # Renderizamos el texto y lo dibujamos en la pantalla
            txt_surface = font_inp.render(label + text, True, COLORS['BLACK'])
            screen_inp.blit(txt_surface, (50, 80 + i * 50))  # Colocamos el texto en su lugar

        # Actualizamos la pantalla para que se vea lo que hemos dibujado 
        pygame.display.flip()

        # Si han pasado 500 ms desde el √∫ltimo parpadeo del cursor, lo cambiamos de visibilidad
        if pygame.time.get_ticks() - cursor_timer > 500:
            cursor_visible = not cursor_visible
            cursor_timer = pygame.time.get_ticks()
        
        # Comprobamos los eventos del teclado y el rat√≥n
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()   # Cerrar Pygame si el usuario cierra la ventana
                exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:  # Si presiona ENTER...

                    if selected_box == 1 and input_boxes[0] and input_boxes[1]:   # Si estamos en la 2d caja (Iteraciones) y ambas tienen texto
                        pygame.quit()   # Se cierra la pantalla
                        return int(input_boxes[0]), int(input_boxes[1])   # Devuelve los valores de ambos input
                    # Si no, cambiamos la selecci√≥n entre las dos cajas
                    selected_box = (selected_box + 1) % 2

                elif event.key == pygame.K_BACKSPACE:  # Si presionamos backspace
                    input_boxes[selected_box] = input_boxes[selected_box][:-1]  # Eliminamos el √∫ltimo car√°cter de la caja seleccionada
                elif event.unicode.isdigit():  # Si se presiona un d√≠gito
                    input_boxes[selected_box] += event.unicode   # A√±adimos el d√≠gito a la caja de texto seleccionada


# ---------------------- Funci√≥n principal ----------------------

def main():
    """ Ejecuta la simulaci√≥n """

    # Par√°metros para la simulaci√≥n
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Declaraci√≥n por parte del usuario del n¬∫ de individuos e iteraciones para la simulaci√≥n
    num_individuos, num_iteraciones = input_screen()
    

    # Creaci√≥n de interfaz con 'pygame'
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Inicializamos 'pygame' para poder utilizarlo sin errores 
    pygame.init()
    pygame.display.init()

    # Creamos la interfaz
    screen = pygame.display.set_mode((screen_width, screen_height))
    pygame.display.set_caption("Simulaci√≥n de Individuos")
    clock = pygame.time.Clock()

    # Creaci√≥n de individuos (tantos como indique el usuario) y objeto estad√≠stica
    individuos = [Individuo(random.randint(0, grid_width - 1), random.randint(0, grid_height - 1)) for _ in range(num_individuos)]
    estadistica = Estadistica()


    # Flujo principal de la simulaci√≥n
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    running = True
    iteracion = 0

    # Bucle principal: finaliza cuando lo indica el usuario (running=false) o se hagan todas las iteraciones declaradas
    while running and iteracion < num_iteraciones:
        iteracion += 1  # Incrementamos el n√∫mero de iteraci√≥n

        # Inicializamos contadores para los eventos en cada iteraci√≥n (y as√≠ indicarlo en el print de cada iteracion)
        reproducciones = 0  # Nuevos individuos por reproducci√≥n
        conflictos = 0  # Conflictos entre individuos
        muertes = 0  # Muertes por envejecimiento
        crecimiento = 0  # Hijos que pasan a adultos

        # Listas para registrar celdas con los eventos ocurridos
        celdas_reproduccion = []
        celdas_conflicto = []
        celdas_muerte = []

        # Captura de acciones del usuario (pausa y cierre del programa)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False    # Finaliza la simulaci√≥n si se cierra la ventana
            elif event.type == pygame.MOUSEBUTTONDOWN:      
                if check_button_click(event.pos):     # Verifica si se hace clic en el bot√≥n de salida
                    print("Simulaci√≥n terminada por el usuario.")
                    running = False

        # Movimiento de los individuos en la simulaci√≥n
        for ind in individuos:
            ind.move()

        # Agrupar individuos por posici√≥n en un diccionario
        celdas = {}
        for ind in individuos:
            pos = (ind.x, ind.y)  # Posici√≥n del individuo en la cuadr√≠cula
            if pos not in celdas:
                celdas[pos] = []
            celdas[pos].append(ind)


        nuevos_individuos = []  # Lista temporal para la siguiente generaci√≥n de individuos
        celdas_evento = []  # Lista de celdas donde ocurren eventos


        # Evaluaci√≥n de eventos en cada celda ocupada
        for pos, inds in celdas.items():
            if len(inds) > 1:  # Si hay m√°s de un individuo en la celda
                probabilidad = random.random()  # Generamos un n√∫mero aleatorio
                if probabilidad <= 0.4:  # 40% de probabilidad de reproducci√≥n
                    nuevo_hijo = Individuo(pos[0], pos[1], age=0, is_child=True, turnos_hijo=6)
                    nuevos_individuos.append(nuevo_hijo)
                    reproducciones += 1
                    estadistica.sumar_reproduccion()
                    celdas_reproduccion.append(pos)  # Registrar celda donde ocurri√≥ reproducci√≥n
                    celdas_evento.append(pos)
                elif probabilidad < 0.9:  # 50% de probabilidad de conflicto (0.4 < probabilidad < 0.9)
                    superviviente = random.choice(inds)  # Un individuo sobrevive
                    nuevos_individuos.append(superviviente)
                    conflictos += len(inds) - 1  # Se eliminan los dem√°s
                    estadistica.sumar_conflicto(len(inds) - 1)
                    celdas_conflicto.append(pos)  # Registrar celda donde ocurri√≥ conflicto
                    celdas_evento.append(pos)
            else:
                nuevos_individuos.extend(inds)  # Si solo hay un individuo, se mantiene


        # Actualizar crecimiento de individuos
        for ind in nuevos_individuos:
            ind.crecer()  # El hijo crece a adulto
            if ind.is_child and not ind.es_rosa():  # Si ha pasado de ni√±o a adulto, lo consideramos un CRECIMIENTO
                crecimiento += 1

        # Incrementamos la edad de los individuos
        for ind in nuevos_individuos:
            ind.age += 1

        # Muertes por envejecimiento
        individuos_vivos = [ind for ind in nuevos_individuos if ind.age < 65]
        muertes = len(nuevos_individuos) - len(individuos_vivos)

        # Agregar celdas de muerte por envejecimiento a la lista
        for ind in nuevos_individuos:
            if ind.age >= 65:  # Si la edad es mayor o igual a 65
                celdas_muerte.append((ind.x, ind.y))  # Se agrega la celda a las muertes por envejecimiento

        # Si un individuo ha muerto, lo agregamos a las celdas de muerte
        if muertes > 0:
            estadistica.sumar_muerte(muertes)
            celdas_muerte.extend(celdas_evento)

        # Actualizar la lista de individuos 
        individuos = individuos_vivos


        # Crear la plantilla para dibujar la simulaci√≥n 
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        screen.fill(COLORS['WHITE'])  # fondo blanco
        draw_grid(screen) # dibujamos la cuadr√≠cula

        # Dibujar celdas de eventos con colores diferentes  (muerte viejo = negras, repro = verde, conflict = rojo)
        for pos in celdas_reproduccion:
            pygame.draw.rect(screen, COLORS['GREEN'], (pos[0] * cell_size, pos[1] * cell_size, cell_size, cell_size))
        for pos in celdas_conflicto:
            pygame.draw.rect(screen, COLORS['RED'], (pos[0] * cell_size, pos[1] * cell_size, cell_size, cell_size))
        for pos in celdas_muerte:
            pygame.draw.rect(screen, COLORS['BLACK'], (pos[0] * cell_size, pos[1] * cell_size, cell_size, cell_size))  

        # Dibujar los elementos de la interfaz: pantalla, estadisticas, boton de salida
        draw_individuos(screen, individuos)
        draw_stats(screen, iteracion, len(individuos), estadistica)  # Pasamos la estad√≠stica
        draw_exit_button(screen)  # Dibuja el bot√≥n de salida
        pygame.display.flip()
        clock.tick(3)

        # A√±adir funcionalida de pausa tras evento
        if reproducciones > 0 or conflictos > 0 or muertes > 0:
            pause_for_event()

        # Imprimir los eventos
        if reproducciones > 0 or conflictos > 0 or muertes > 0 or crecimiento > 0:
            print(f"Iteraci√≥n {iteracion} terminada: {len(individuos)} individuos vivos")
            if reproducciones > 0:
                print(f"  Reproducci√≥n: {reproducciones} nuevos individuos")
            if conflictos > 0:
                print(f"  Conflictos: {conflictos} individuo asesinado")
            if muertes > 0:
                print(f"  Muertes: {muertes} individuos muertos")
            if crecimiento > 0:
                print(f"  Crecimiento: {crecimiento} individuos pasaron a adultos")

        # Cuando no queden vivos, terminamos
        if len(individuos) == 0:
            print("No quedan individuos vivos. Fin de la simulaci√≥n")
            break

    pygame.quit()

if __name__ == "__main__":
    main()